<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	Config file for AndroidProFreeSplitter.
	Copyright 2010 by Victor Derevyanko, dvpublic0@gmail.com
	http://code.google.com/p/dvsrc/
	$Id: apfs_config.xml 101 2011-01-19 07:25:59Z dv $
-->
<config>
	<version target="pro" opposite="free">
<!-- All content of dest diretory will be deleted except
     specified files and directories (i.e. svn, git etc)
-->
		<clear_dest_directory>
			<exclude_directories>*.svn</exclude_directories>
			<exclude_files></exclude_files>
		</clear_dest_directory>

<!-- Files that should be copied from original project directory 
-->
		<copy>
			<include_directories>*.*</include_directories>
			<include_files>*.*</include_files>
			<exclude_directories>*.svn; bin; gen</exclude_directories>
			<exclude_files>*#opposite#.java;*#opposite#.xml</exclude_files>
		</copy>
<!-- Files that should be modified accoridng rules "//content/replace" 		
-->
		<modify_content>
			<include_files>*.java;*.xml;*.project</include_files>				
			<exclude_files></exclude_files>
		</modify_content>

<!-- Rule for modification package name. If postfix is not empty, then: 
	1) package name will be modified: your.package.name -> your.package.name.postfix
	2) files from src\your\package\name will be copied to directory src\your\package\name\pro
-->
		<package>
			<postfix>#target?#target#:#</postfix> 
 			<include_files>*.java;*.xml</include_files>
		</package>


<!-- Rules for file content modification.
	These rules are applied to all files specified in <modify_content>
	It's possible to use to methods of search/replace: direct and regexp.
	Regexp search is default. To use direct method, set attribute "regexp" to 0, i.e.
   		<replace>
   			<files>*.java</files>
   			<search>//#startFREE</search>
   			<replace>/*#startFREE</replace>
				<regexp>0</regexp>				
   		</replace> 
-->
		<content>		

<!-- 	Rule to change icon from free to pro
-->
			<replace if="target:pro">
				<files>AndroidManifest.xml</files>
				<search>//*[@android:icon="@drawable/icon"]/@android:icon</search>
				<replace>@drawable/icon_pro</replace>			
				<kind>xml</kind>
				<xmlns name="android">http://schemas.android.com/apk/res/android</xmlns>
			</replace>


<!-- Support of pseudo "ifdef..endif" construction.
The code:

//#startFREE
code 
//#endFREE

will be transformed to

/*#startFREE
code
#endFREE*/

startBASE..endBASE are commented always independed on target version
-->
   		<replace>
   			<files>*.java</files>
   			<search>//#startBASE</search>
   			<replace>/*#startBASE</replace>
				<kind>direct</kind>
   		</replace>
   		<replace>
   			<files>*.java</files>
   			<search>//#endBASE</search>
   			<replace>endBASE*/</replace>
				<kind>direct</kind>
   		</replace>
   		<replace>
   			<files>*.java</files>
   			<search>//#start#OPPOSITE#</search>
   			<replace>/*#start#OPPOSITE#</replace>
				<kind>direct</kind>
   		</replace>
   		<replace>
   			<files>*.java</files>
   			<search>//#end#OPPOSITE#</search>
   			<replace>#end#OPPOSITE#*/</replace>
				<kind>direct</kind>
   		</replace>



<!-- 	Rule to set correct value to constant Version.IS_PRO 
-->
   		<replace>
   			<files>version.java</files>
   			<search>public\s+static\s+final\s+boolean\s+IS_PRO\s*=\s*([^;]+);</search>
   			<replace>public static final boolean IS_PRO = ("#target#" == "pro");</replace>			
   		</replace>

<!-- 	Several rules to set correct resource id. Examples:
		find_id(Version.GetProFreeId(R.id.free, R.id.pro);  -> find_id(R.id.free);
		find_id(Version.GetFreeId(R.id.free); -> find_id(0);
		find_id(Version.GetProId(R.id.pro); -> find_id(R.id.pro);
-->
   		<replace>
   			<files>*.java</files>
   			<search>Version.GetProFreeId\(\s*([^,]+)\s*,\s*([^)]+)\s*\)</search>
   			<replace>#target?($2):($1)#</replace>			
   		</replace>
   		<replace>
   			<files>*.java</files>
   			<search>Version.GetFreeId\(\s*([^)]+)\s*\)</search>
   			<replace>#target?0:($1)#</replace>			
   		</replace>
   		<replace>
   			<files>*.java</files>
   			<search>Version.GetProId\(\s*([^)]+)\s*\)</search>
   			<replace>#target?($1):0#</replace>			
   		</replace>

<!-- Transform FreePro calls to Pro calls: Example:
		int a = MyFunction_FreePro(1, 2); -> int a = MyFunction_Pro(1, 2);
-->
   		<replace>
   			<files>*.java</files>
   			<search>(\.[^\s]+)_ProFree(\([^)]*\))</search>
   			<replace>#target?$1_Pro$2:$1_Free$2#;</replace>			
   		</replace>

			<replace if="target:pro">			
				<files>strings.xml</files>
				<search>//resources/string[@name="widget_label" or @name="app_name"]</search>
				<replace>My Application Pro Title</replace>			
				<kind>xml</kind>
			</replace>

			<replace if="target:pro">			
				<files>.project</files>
				<search>projectDescription/name</search>
				<replace>My Application Pro Title</replace>
				<kind>xml</kind>
			</replace>

		</content>
	</version>
</config>